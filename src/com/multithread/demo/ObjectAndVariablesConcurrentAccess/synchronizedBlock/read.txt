同步语句块:
		用关键字synchronized声明方法的某些情况下是有弊端的,比如A线程调用同步方法执行一个长时间的任务,那么B线程
	则必须等待比较长的时间,在这样的情况下可以使用synchronized同步语句块来解决.
	1.synchronized方法的弊端
	2.synchronized同步代码块的使用
			当两个并发线程访问同一个对象object的synchronized(this)同步代码块时,一段时间内只有一个线程
		被执行,另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块.	
	3.用同步代码块解决同步方法的弊端
			当一个线程访问object中的一个synchronized同步代码块时,另一个线程仍然可以访问该object对象中的非synchronized(this)同步代码块
		虽然用时缩短,运行效率加快,但同步synchronized代码块真的同步吗？真的持有当前调用的对象的锁吗?答案为是.	
	4.一半同步,一半异步
		不在synchronized块中的就是异步代码,在synchronized中的就是同步代码	
	5.synchronized代码块间的同步性
			在使用同步synchronized(this)代码块时需要注意的是,当一个线程访问object的一个synchronized(this)同步
		代码块时,其它线程对同一个object中所有其它synchronized(this)同步代码块的访问将被阻塞,
		这说明synchronized使用的是一个"对象监视器".	
	6.验证同步synchronized(this)代码块是锁定当前对象的	
	7.将任意对象作为对象监视器
		多个线程调用同一个对象中的不同名称的synchronized同步方法或synchronized(this)同步代码块时,调用的效果就是按照顺序执行,也就是同步的,阻塞的.
		这说明synchronized同步方法或synchronized(this)同步代码块的调用呈阻塞状态.
			(1)synchronized同步方法
				1) 对其他synchronized同步方法或synchronized(this)同步代码块调用呈阻塞状态
				2) 同一时间只有一个线程可以执行synchronized同步方法中的代码
			(2)synchronized(this)同步代码块
				1) 对其他synchronized同步方法或synchronized(this)同步代码块调用呈阻塞状态
				2) 同一时间只有一个线程可以执行synchronized(this)同步代码块中的代码
			除了使用synchronized(this)格式来同步代码块,其实java还支持对"任意对象"作为"对象监视器"来实现同步的功能.
			这个"任意对象"大多数是实例变量及方法的参数,使用格式为synchronized(非this对象).
			根据前面对synchronized(this)同步代码块的作用总结可知,synchronized(非this对象)格式的作用只有1种:synchronized(非this对象)同步代码块
				1) 在多个线程持有"对象监视器"为同一个对象前提下,同一时间只有一个线程可以执行synchronized(非this对象)同步代码块中的代码.
				2) 当持有"对象监视器"为同一个对象的前提下,同一时间只有一个线程可以执行synchronized(非this对象)同步代码块中的代码.
			锁非this对象具有一定的优点:如果在一个类中有很多个synchronized方法,这时虽然能实现同步,但会受到阻塞,所以影响效率;但如果使用同步代码块
			锁非this对象,则synchronized(非this)代码块中的程序与同步方法是异步的,不与其他锁this同步方法争抢this锁,则可以大大提高运行效率.	
		使用"synchronized(非this对象x)同步代码块"格式化进行同步操作时,对象监视器必须是同一个对象.如果不是同一个
	 	监视器,运行的结果就是异步调用了,就会出现交叉运行.
		使用"synchronized(非this对象x)同步代码块"格式时,持有不同的对象监视器是异步的效果.
	 	也就是说:synchronized(非this对象)与同步synchronized方法是异步调用的效果.
	 	由于对象监视器不同,所以运行结果就是异步的.
		同步代码块放在非同步synchronized方法中进行声明,并不能保证调用方法的线程的执行同步/顺序读,也就是
		线程调用的顺序是无序的,虽然在同步块中执行的顺序是同步的,这样极易出现"脏读"问题.
		解决方式:
			使用"synchronized(非this对象x)同步代码块"格式也可以解决"脏读"问题.
		验证多个线程调用同一个方法是随机的   
	 		由于线程执行的顺序是不确定的,所以当线程A和线程B的执行带有分支判断的方法时,就会出现逻辑上的错误,有可能出现脏读.
		验证多个线程调用同一个方法是随机的   
	 		由于线程执行的顺序是不确定的,所以当线程A和线程B的执行带有分支判断的方法时,就会出现逻辑上的错误,有可能出现脏读.
			解决方式:同步化 修改MyService方法加上synchronized关键字并且对myOnlist进行同步
	8.细化验证3个结论
		"synchronized(非this对象x)"格式的写法是将x对象本身作为"对象监视器",这样就可以得出以下3个结论
		1) 当多线程同时执行synchronized(x){} 同步代码块时呈同步效果;
		2) 当	其他线程执行x对象中的synchronized同步方法时呈同步效果;
		3) 当其他线程执行x对象方法里面的synchronized(this)代码块时也呈现同步效果
		但需要注意:如果其他线程调用不加synchronized关键字的方法时,还是异步调用.	
	9.静态同步synchronized 方法与synchronized(class) 代码块
		1)关键字synchronized还可以应用在static静态方法上,如果这样写,那是对当前的*.java文件对应的Class类进行持锁
 		区别:
			synchronized加到静态方法上和synchronized加到非静态方法上的区别
			synchronized关键字加到static静态方法上是给Class类上锁,而synchronized关键字加到非static静态方法上是给对象上锁.
	 	2)关键字synchronized还可以应用在static静态方法上,如果这样写,那是对当前的*.java文件对应的Class类进行持锁
			验证synchronized加到静态方法上和synchronized加到非静态方法上 不是同一个锁
			出现异步的原因:因为持有不同的锁,一个是对象锁,一个是Class锁,而Class锁可以对类的所有对象实例起作用
		3)关键字synchronized还可以应用在static静态方法上,如果这样写,那是对当前的*.java文件对应的Class类进行持锁
			验证 Class锁可以对类的所有对象实例起作用
		4)同步synchronized(class)代码块的作用其实和synchronized static 方法的作用一样.
	10.数据类型String的常量池特性
	 	1)将synchronized(sting) 同步块与String联合使用时,要注意常量池以带来的一些例外
		 	出现此情况的原因:String的两个值都是AA,两个线程持有相同的锁,所以造成B不能执行.这就是String常量池锁带来的问题.
		  	因此大多数情况下，同步synchronized代码块都不能使用String作为锁对象,而是改用其他.
		 	比如new Object()实例化一个Object对象,但它并不放入缓存中.
		2)大多数情况下，同步synchronized代码块都不能使用String作为锁对象,而是改用其他.
	 		比如new Object()实例化一个Object对象,但它并不放入缓存中.这样持有的锁不是一个
	11.同步synchronized方法无限等待与解决
		1)同步方法容易造成死循环
			解决方式:使用同步块来解决
	12.多线程的死锁
		Java线程死锁是一个经典的多线程问题,因为不同的线程都在等待根本不可能被释放的锁,从而导致所有的任务都无法继续
		完成.在多线程技术中,"死锁"是必须避免的,因为这会造成线程的"假死"
		使用JDK自带工具检测死锁：
			(1)首先进入cmd窗口,再次进入jdk安装目录下的bin目录下
			(2)输入jps,回车,得到Run的id值
			(3)jstack -l id值  
			(4)在末尾处可以看到死锁的信息
	13.内置类与静态内置类
	14.内置类与同步:实验1
		此案例中有两个同步方法,但使用的却是不同的锁(也就是不同的"对象监视器") 结果也是异步(乱序)
	15.内置类与同步:实验2
		此案例中,同步代码块synchronized(class2)对class2上锁后,其它线程只能以同步的方式调用class2中的静态同步方法.		
	16.锁对象的改变
		1)在将任何数据类型作为同步锁时,需要注意的是,是否有多个线程同时持有锁对象,如果同时持有相同的锁对象,
			则这些线程之间就是同步的,如果分别获得锁对象,这些线程之间就是异步的.		
		2)在将任何数据类型作为同步锁时,需要注意的是,是否有多个线程同时持有锁对象,如果同时持有相同的锁对象,
			则这些线程之间就是同步的,如果分别获得锁对象,这些线程之间就是异步的.
			只要对象不变,即使对象的属性被改变,运行的结果还是同步	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			